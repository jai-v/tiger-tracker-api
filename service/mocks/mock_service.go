// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -destination=./mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "tiger-tracker-api/service/models"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockAppService is a mock of AppService interface.
type MockAppService struct {
	ctrl     *gomock.Controller
	recorder *MockAppServiceMockRecorder
}

// MockAppServiceMockRecorder is the mock recorder for MockAppService.
type MockAppServiceMockRecorder struct {
	mock *MockAppService
}

// NewMockAppService creates a new mock instance.
func NewMockAppService(ctrl *gomock.Controller) *MockAppService {
	mock := &MockAppService{ctrl: ctrl}
	mock.recorder = &MockAppServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppService) EXPECT() *MockAppServiceMockRecorder {
	return m.recorder
}

// GetAllTigersWithRecentSightingsFirst mocks base method.
func (m *MockAppService) GetAllTigersWithRecentSightingsFirst(ctx *gin.Context, pageNumber, pageSize int) (models.ListTigersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTigersWithRecentSightingsFirst", ctx, pageNumber, pageSize)
	ret0, _ := ret[0].(models.ListTigersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTigersWithRecentSightingsFirst indicates an expected call of GetAllTigersWithRecentSightingsFirst.
func (mr *MockAppServiceMockRecorder) GetAllTigersWithRecentSightingsFirst(ctx, pageNumber, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTigersWithRecentSightingsFirst", reflect.TypeOf((*MockAppService)(nil).GetAllTigersWithRecentSightingsFirst), ctx, pageNumber, pageSize)
}
