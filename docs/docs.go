// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/health": {
            "get": {
                "description": "Confirms if the API Service is up and running",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Checks API Service health",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/v1/tigers": {
            "get": {
                "description": "It is a paginated endpoint. The tigers are sorted by the last time they were seen.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tigers"
                ],
                "summary": "Returns a list of all the tigers with their details.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "pageNo",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ListTigersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apiError.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apiError.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apiError.APIError": {
            "type": "object",
            "properties": {
                "errorCode": {
                    "$ref": "#/definitions/apiError.ErrorCode"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        },
        "apiError.ErrorCode": {
            "type": "string",
            "enum": [
                "ERR_BAD_REQUEST",
                "ERR_INTERNAL_SERVER_ERROR"
            ],
            "x-enum-varnames": [
                "BadRequestErrorCode",
                "InternalServerErrorCode"
            ]
        },
        "models.ListTigersResponse": {
            "type": "object",
            "properties": {
                "tigers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TigerDetailWithSightings"
                    }
                }
            }
        },
        "models.Location": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "models.TigerDetailWithSightings": {
            "type": "object",
            "properties": {
                "dob": {
                    "type": "string"
                },
                "lastPosition": {
                    "$ref": "#/definitions/models.Location"
                },
                "lastSeen": {
                    "type": "string"
                },
                "tigerId": {
                    "type": "integer"
                },
                "tigerName": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
